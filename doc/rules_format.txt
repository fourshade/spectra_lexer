The assets directory contains UTF-8 JSON-based text files with information for a complete English steno system.
A system includes a key layout file, a rules file, and a board graphics definitions file.
The file extension is .cson for "commented JSON". Full-line comments are allowed using "#".
The format is alternately named so that normal JSON parsers won't try to read it (JSON does not support comments).
The fastest way to parse these is to strip out comment lines followed by sending it through a normal JSON parser.
These files may also be parsed as valid YAML, but YAML parsers are *much* slower due to their complexity.

Out of the files needed to run the lexer, the steno rule file is detailed here. It contains a single JSON object.
Inside the object, each line contains a key/value pair with a single steno rule, a comment, or nothing.
The key strings are rule IDs, which are only internally used and not displayed in any way to the user.
The body of each rule is an array containing 5 string values.

A rule generally maps a series of steno keys to English characters.
Some rules may be built off of others, in which case their characters contain references to one or more "child" rules.
The order of rule definitions does not matter for the purpose of references, but there cannot be any reference cycles.
References may not be nested. Keeping references on a single level of nesting simplifies parsing greatly.

The following is a specification of the formal grammar for the Spectra steno rule file format:

--------------------------------------------------------------------------------

LHS ::= RHS      Substitution; anywhere LHS occurs, it must be replaced with a valid interpretation of RHS.
""               Empty substitution.
'x'              Single UTF-8 character.
<char>           Single UTF-8 character of code point 0x20 or greater.
<s_char>         Single UTF-8 character of code point 0x20 or greater excluding '"' (double quote)
<newline>        Newline token: either 0x0A or 0x0D+0x0A. Whichever is chosen must be uniform throughout a file.
expr1 expr2      Concatenation of expressions.
expr1 | expr2    Either one expression or the other. Has lowest precedence.
; line           Comment line; explains usages of data fields.

--------------------------------------------------------------------------------

FILE      ::=  comments '{' body '}' <newline>
body      ::=  "" | blocks
blocks    ::=  block | block delim blocks
block     ::=  comments rule
comments  ::=  "" | comment comments
comment   ::=  ws '#' chars <newline>
chars     ::=  "" | <char> chars
rule      ::=  ws id ':' ws '[' keys delim letters delim alt delim '"' flags '"' delim info']' <newline>
flags     ::=  "" | flag ws flags
delim     ::=  ',' ws
ws        ::=  "" | ' ' ws
string    ::=  '"' s_chars '"'
s_chars   ::=  "" | <s_char> s_chars

id        ::=  string
; Contains a unique ID using one of the following naming patterns. `xx` is typically the literal characters produced:
; "xx"   = vowel keys in center
; "xx."  = keys on left side
; ".xx"  = keys on right side
; ".xx." = non-vowel keys near center
; "xx-"  = independent prefix stroke
; "-xx"  = independent suffix stroke
; "xx+"  = resolves key name conflicts
; "xx!"  = soft variants of consonants, long variants of vowels
; "xx*"  = orthographic rule
; "xx~"  = for internal use only, should not appear in top level of parsing output
; "X:xx" = determines purpose of keys that don't contribute to the letters in the word

keys      ::=  string
; Contains a sequence of steno keys. Keys are uppercase, hyphen-separated if necessary, with strokes separated by '/'.

letters   ::=  s_chars
; Contains a combination of literal characters and the following types of bracketed ID references:
; "(xx)"         = substitutes letters from the rule with ID `xx`
; "(letters|xx)" = indicates usage of the rule with ID `xx`, but translating to the literal `letters`

alt       ::=  string
; Contains alternate display text for use in diagrams.

flag      ::=  s_chars
; Contains a flag identifier. Flags are boolean values where presence of the identifier means 'true'.

info      ::=  string
; Contains an English description of the rule and its application.
